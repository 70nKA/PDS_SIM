import sys
from PIL import Image
import numpy as np

def convert_jpg_to_binary_txt(input_image_path, output_txt_path):
    # Open the input image (JPG)
    img = Image.open(input_image_path)
    
    # Resize the image to 512x512 pixels
    img_resized = img.resize((512, 512))
    
    # Convert to grayscale (optional, simplifies pixel data)
    img_gray = img_resized.convert('L')
    
    # Convert image data to numpy array (pixel values)
    img_data = np.array(img_gray)
    
    # Write pixel values to a text file in 8-bit binary format
    with open(output_txt_path, 'w') as file:
        for row in img_data:
            for pixel in row:
                # Convert pixel value to 8-bit binary format
                binary_pixel = format(pixel, '08b')
                file.write(binary_pixel + '\n')

    print(f"Pixel data saved as 8-bit binary text: {output_txt_path}")

# Main section to accept command-line arguments
if __name__ == '__main__':
    if len(sys.argv) != 3:
        print("Usage: python script_name.py <input_image_path> <output_txt_path>")
    else:
        input_image = sys.argv[1]  # Get input image path from command-line
        output_txt = sys.argv[2]   # Get output text file path from command-line
        convert_jpg_to_binary_txt(input_image, output_txt)
